// <auto-generated />
using System;
using MED.Aluno.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MED.Aluno.Infrastructure.Migrations
{
    [DbContext(typeof(AlunoDbContext))]
    [Migration("20210604142753_Criacao-Projeto")]
    partial class CriacaoProjeto
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MED.Aluno.Domain.Entities.AlunoModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EnderecoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("ObservacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TurmaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId")
                        .IsUnique()
                        .HasFilter("[EnderecoId] IS NOT NULL");

                    b.HasIndex("ObservacaoId")
                        .IsUnique()
                        .HasFilter("[ObservacaoId] IS NOT NULL");

                    b.HasIndex("TurmaId");

                    b.ToTable("Alunos");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.AlunoResponsavelModel", b =>
                {
                    b.Property<Guid>("AlunoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AlunoId", "ResponsavelId");

                    b.HasIndex("ResponsavelId");

                    b.ToTable("AlunosResponsaveis");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.EnderecoModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Complemento")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.EscolaModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EnderecoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("ObservacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId")
                        .IsUnique()
                        .HasFilter("[EnderecoId] IS NOT NULL");

                    b.HasIndex("ObservacaoId");

                    b.ToTable("Escolas");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.ObservacaoModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("varchar(8000)");

                    b.HasKey("Id");

                    b.ToTable("Observacoes");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.ResponsavelModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("ObservacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObservacaoId")
                        .IsUnique()
                        .HasFilter("[ObservacaoId] IS NOT NULL");

                    b.ToTable("Responsaveis");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.ResumoDiaModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AlunoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataResumo")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("varchar(8000)");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.ToTable("ResumosDias");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.TurmaModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EscolaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("ObservacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EscolaId");

                    b.HasIndex("ObservacaoId")
                        .IsUnique()
                        .HasFilter("[ObservacaoId] IS NOT NULL");

                    b.ToTable("Turmas");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.AlunoModel", b =>
                {
                    b.HasOne("MED.Aluno.Domain.Entities.EnderecoModel", "Endereco")
                        .WithOne()
                        .HasForeignKey("MED.Aluno.Domain.Entities.AlunoModel", "EnderecoId");

                    b.HasOne("MED.Aluno.Domain.Entities.ObservacaoModel", "Observacao")
                        .WithOne()
                        .HasForeignKey("MED.Aluno.Domain.Entities.AlunoModel", "ObservacaoId");

                    b.HasOne("MED.Aluno.Domain.Entities.TurmaModel", "Turma")
                        .WithMany("Alunos")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("MED.Core.DomainObjects.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("AlunoModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("varchar(11)")
                                .HasColumnName("Cpf");

                            b1.HasKey("AlunoModelId");

                            b1.ToTable("Alunos");

                            b1.WithOwner()
                                .HasForeignKey("AlunoModelId");
                        });

                    b.OwnsOne("MED.Core.DomainObjects.Rg", "Rg", b1 =>
                        {
                            b1.Property<Guid>("AlunoModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .HasMaxLength(10)
                                .HasColumnType("varchar(10)")
                                .HasColumnName("Rg");

                            b1.HasKey("AlunoModelId");

                            b1.ToTable("Alunos");

                            b1.WithOwner()
                                .HasForeignKey("AlunoModelId");
                        });

                    b.Navigation("Cpf");

                    b.Navigation("Endereco");

                    b.Navigation("Observacao");

                    b.Navigation("Rg");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.AlunoResponsavelModel", b =>
                {
                    b.HasOne("MED.Aluno.Domain.Entities.AlunoModel", "Aluno")
                        .WithMany("AlunosResponsaveis")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MED.Aluno.Domain.Entities.ResponsavelModel", "Responsavel")
                        .WithMany("AlunosResponsaveis")
                        .HasForeignKey("ResponsavelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Responsavel");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.EscolaModel", b =>
                {
                    b.HasOne("MED.Aluno.Domain.Entities.EnderecoModel", "Endereco")
                        .WithOne()
                        .HasForeignKey("MED.Aluno.Domain.Entities.EscolaModel", "EnderecoId");

                    b.HasOne("MED.Aluno.Domain.Entities.ObservacaoModel", "Observacao")
                        .WithMany()
                        .HasForeignKey("ObservacaoId");

                    b.OwnsOne("MED.Core.DomainObjects.Cnpj", "Cnpj", b1 =>
                        {
                            b1.Property<Guid>("EscolaModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("varchar(14)")
                                .HasColumnName("Cpnj");

                            b1.HasKey("EscolaModelId");

                            b1.ToTable("Escolas");

                            b1.WithOwner()
                                .HasForeignKey("EscolaModelId");
                        });

                    b.OwnsOne("MED.Core.DomainObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("EscolaModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Endereco")
                                .IsRequired()
                                .HasMaxLength(254)
                                .HasColumnType("varchar(254)")
                                .HasColumnName("Email");

                            b1.HasKey("EscolaModelId");

                            b1.ToTable("Escolas");

                            b1.WithOwner()
                                .HasForeignKey("EscolaModelId");
                        });

                    b.OwnsOne("MED.Core.DomainObjects.Telefone", "Celular", b1 =>
                        {
                            b1.Property<Guid>("EscolaModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(13)
                                .HasColumnType("varchar(13)")
                                .HasColumnName("Celular");

                            b1.HasKey("EscolaModelId");

                            b1.ToTable("Escolas");

                            b1.WithOwner()
                                .HasForeignKey("EscolaModelId");
                        });

                    b.OwnsOne("MED.Core.DomainObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("EscolaModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(13)
                                .HasColumnType("varchar(13)")
                                .HasColumnName("Telefone");

                            b1.HasKey("EscolaModelId");

                            b1.ToTable("Escolas");

                            b1.WithOwner()
                                .HasForeignKey("EscolaModelId");
                        });

                    b.Navigation("Celular");

                    b.Navigation("Cnpj");

                    b.Navigation("Email");

                    b.Navigation("Endereco");

                    b.Navigation("Observacao");

                    b.Navigation("Telefone");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.ResponsavelModel", b =>
                {
                    b.HasOne("MED.Aluno.Domain.Entities.ObservacaoModel", "Observacao")
                        .WithOne()
                        .HasForeignKey("MED.Aluno.Domain.Entities.ResponsavelModel", "ObservacaoId");

                    b.OwnsOne("MED.Core.DomainObjects.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("ResponsavelModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("varchar(11)")
                                .HasColumnName("Cpf");

                            b1.HasKey("ResponsavelModelId");

                            b1.ToTable("Responsaveis");

                            b1.WithOwner()
                                .HasForeignKey("ResponsavelModelId");
                        });

                    b.OwnsOne("MED.Core.DomainObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("ResponsavelModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Endereco")
                                .IsRequired()
                                .HasMaxLength(254)
                                .HasColumnType("varchar(254)")
                                .HasColumnName("Email");

                            b1.HasKey("ResponsavelModelId");

                            b1.ToTable("Responsaveis");

                            b1.WithOwner()
                                .HasForeignKey("ResponsavelModelId");
                        });

                    b.OwnsOne("MED.Core.DomainObjects.Rg", "Rg", b1 =>
                        {
                            b1.Property<Guid>("ResponsavelModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .HasMaxLength(10)
                                .HasColumnType("varchar(10)")
                                .HasColumnName("Rg");

                            b1.HasKey("ResponsavelModelId");

                            b1.ToTable("Responsaveis");

                            b1.WithOwner()
                                .HasForeignKey("ResponsavelModelId");
                        });

                    b.OwnsOne("MED.Core.DomainObjects.Telefone", "Celular", b1 =>
                        {
                            b1.Property<Guid>("ResponsavelModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(13)
                                .HasColumnType("varchar(13)")
                                .HasColumnName("Celular");

                            b1.HasKey("ResponsavelModelId");

                            b1.ToTable("Responsaveis");

                            b1.WithOwner()
                                .HasForeignKey("ResponsavelModelId");
                        });

                    b.OwnsOne("MED.Core.DomainObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("ResponsavelModelId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(13)
                                .HasColumnType("varchar(13)")
                                .HasColumnName("Telefone");

                            b1.HasKey("ResponsavelModelId");

                            b1.ToTable("Responsaveis");

                            b1.WithOwner()
                                .HasForeignKey("ResponsavelModelId");
                        });

                    b.Navigation("Celular");

                    b.Navigation("Cpf");

                    b.Navigation("Email");

                    b.Navigation("Observacao");

                    b.Navigation("Rg");

                    b.Navigation("Telefone");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.ResumoDiaModel", b =>
                {
                    b.HasOne("MED.Aluno.Domain.Entities.AlunoModel", "Aluno")
                        .WithMany("Resumos")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Aluno");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.TurmaModel", b =>
                {
                    b.HasOne("MED.Aluno.Domain.Entities.EscolaModel", "Escola")
                        .WithMany("Turmas")
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MED.Aluno.Domain.Entities.ObservacaoModel", "Observacao")
                        .WithOne()
                        .HasForeignKey("MED.Aluno.Domain.Entities.TurmaModel", "ObservacaoId");

                    b.Navigation("Escola");

                    b.Navigation("Observacao");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.AlunoModel", b =>
                {
                    b.Navigation("AlunosResponsaveis");

                    b.Navigation("Resumos");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.EscolaModel", b =>
                {
                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.ResponsavelModel", b =>
                {
                    b.Navigation("AlunosResponsaveis");
                });

            modelBuilder.Entity("MED.Aluno.Domain.Entities.TurmaModel", b =>
                {
                    b.Navigation("Alunos");
                });
#pragma warning restore 612, 618
        }
    }
}
